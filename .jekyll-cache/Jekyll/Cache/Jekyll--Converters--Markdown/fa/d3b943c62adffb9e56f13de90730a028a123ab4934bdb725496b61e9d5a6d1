I"ΩM<h2 id="a-splitting-iommu-group">A. Splitting IOMMU group</h2>

<h3 id="1-pcie-acs-override">1. PCIe ACS override</h3>

<p>PCIe ACS (Access Control Services) Override is a feature in Linux-based systems and server systems that use PCIe (Peripheral Component Interconnect Express) ports. This feature allows you to override or modify the configuration of the ACS protocol within the PCIe system. ACS is part of the PCIe standard and plays a role in controlling access to PCIe devices, especially when using PCIe passthrough in virtualization.</p>

<p>Specifically, the PCIe ACS Override feature allows you to:</p>

<p><strong>Override:</strong> Modify the ACS configuration to eliminate or modify access constraints between PCIe devices. This can be useful when you want to share PCIe devices among virtual machines or different Linux systems and need to disable or adjust ACS constraints.</p>

<p><strong>Configuration Management:</strong> Adjust how the system manages access to PCIe devices. You can specify access rights for virtual machines or physical devices to specific PCIe devices.</p>

<p><strong>Customization:</strong> PCIe ACS Override enables you to customize the ACS configuration based on your specific needs, especially when using PCIe passthrough in a virtualized environment.</p>

<p>Please note that using PCIe ACS Override should be done carefully and following the specific guidelines of your system and virtualization management software, such as KVM/QEMU or VMware. Adjusting the ACS configuration can affect the stability and security of the PCIe system, so it should be performed knowledgeably, taking into account its impact on the system.</p>

<h3 id="2-enable-pcie-acs-override">2. Enable PCIe ACS override</h3>

<p>Open the grub configuration file:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nano /etc/default/grub
</code></pre></div></div>

<p>Add the <code class="language-plaintext highlighter-rouge">pcie_acs_override=downstream,multifunction</code> flags to the <code class="language-plaintext highlighter-rouge">GRUB_CMDLINE_LINUX</code> variable:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">GRUB_CMDLINE_LINUX_DEFAULT</span><span class="o">=</span><span class="s2">"quiet intel_iommu=on pcie_acs_override=downstream,multifunction vfio-pci.ids=10ee:5000,10ee:5001"</span>
</code></pre></div></div>

<p>Update grub:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>update-grub
</code></pre></div></div>

<p>or</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>grub-mkconfig <span class="nt">-o</span> /boot/grub/grub.cfg
</code></pre></div></div>

<p>Check the new content of Grub by</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /proc/cmdline

<span class="nv">BOOT_IMAGE</span><span class="o">=</span>/boot/vmlinuz-5.15.0-acso <span class="nv">root</span><span class="o">=</span><span class="nv">UUID</span><span class="o">=</span>2006ace4-1a9a-4d7f-aa7c-685cae3abe4c ro quiet <span class="nv">intel_iommu</span><span class="o">=</span>on <span class="nv">pcie_acs_override</span><span class="o">=</span>downstream,multifunction vfio-pci.ids<span class="o">=</span>10ee:5000,10ee:5001
</code></pre></div></div>

<p>Then, reboot the host.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>reboot now
</code></pre></div></div>

<p>After rebooting, re-check IOMMU group:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./iommu_viewer.sh
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
Group:  1   0000:00:01.0 PCI bridge [0604]: Intel Corporation Xeon E3-1200 v5/E3-1500 v5/6th Gen Core Processor PCIe Controller (x16) [8086:1901] (rev 0a)   Driver: pcieport
Group:  1   0000:00:01.1 PCI bridge [0604]: Intel Corporation Xeon E3-1200 v5/E3-1500 v5/6th Gen Core Processor PCIe Controller (x8) [8086:1905] (rev 0a)   Driver: pcieport
Group:  1   0000:01:00.0 Processing accelerators [1200]: Xilinx Corporation Device [10ee:5000]   Driver: vfio-pci
Group:  1   0000:01:00.1 Processing accelerators [1200]: Xilinx Corporation Device [10ee:5001]   Driver: vfio-pci
Group:  1   0000:02:00.0 VGA compatible controller [0300]: NVIDIA Corporation Device [10de:2489] (rev a1)   Driver: nvidia
Group:  1   0000:02:00.1 Audio device [0403]: NVIDIA Corporation Device [10de:228b] (rev a1)   Driver: snd_hda_intel
Group:  2   0000:00:02.0 Display controller [0380]: Intel Corporation UHD Graphics 630 (Desktop 9 Series) [8086:3e98]   Driver: i915
Group:  3   0000:00:12.0 Signal processing controller [1180]: Intel Corporation Cannon Lake PCH Thermal Controller [8086:a379] (rev 10)   Driver: intel_pch_thermal
Group:  4   0000:00:14.0 USB controller [0c03]: Intel Corporation Cannon Lake PCH USB 3.1 xHCI Host Controller [8086:a36d] (rev 10)   Driver: xhci_hcd
...
</code></pre></div></div>

<p>Unfortunately, it DID NOT work since my machine which includes a MOBO (Z390 Gigabyte Wifi Pro + CPU 9900K) does not support <code class="language-plaintext highlighter-rouge">pcie_acs_override</code>.</p>

<p>The last solution would be rebuild the host‚Äôs kernel that patched ACS feature and use that kernel instead. Luckily, I found a way to do so.</p>

<h2 id="b-build-patched-acs-kernel">B. Build patched ACS kernel</h2>

<h3 id="1-download-acs-patch-and-original-kernel-to-build">1. Download ACS patch and original kernel to build</h3>

<p>On the host machine,</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>apt upgrade
<span class="nb">sudo </span>reboot now
<span class="nb">sudo </span>apt <span class="nb">install </span>build-essential libncurses5-dev fakeroot xz-utils libelf-dev liblz4-tool unzip flex bison bc debhelper rsync libssl-dev:native 
<span class="nb">mkdir</span> ~/kernel
<span class="nb">cd</span> ~/kernel
wget https://github.com/nguyencanhtrung/kvm-pcie/blob/main/acso.patch
wget https://github.com/torvalds/linux/archive/refs/tags/v5.15.zip
unzip v5.15.zip
</code></pre></div></div>

<h3 id="2-editing-config-file-to-avoid-building-error">2. Editing config file to avoid building error</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>linux-5.15
<span class="nb">sudo </span>find /boot/ <span class="se">\(</span> <span class="nt">-iname</span> <span class="s2">"*config*"</span> <span class="nt">-a</span> <span class="nt">-iname</span> <span class="s2">"*</span><span class="sb">`</span><span class="nb">uname</span> <span class="nt">-r</span><span class="sb">`</span><span class="s2">*"</span> <span class="se">\)</span> <span class="nt">-exec</span> <span class="nb">cp</span> <span class="nt">-i</span> <span class="nt">-t</span> ./ <span class="o">{}</span> <span class="se">\;</span>
<span class="nb">mv</span> <span class="k">*</span><span class="sb">`</span><span class="nb">uname</span> <span class="nt">-r</span><span class="sb">`</span><span class="k">*</span> .config
<span class="nb">ls</span> /boot | <span class="nb">grep </span>config
<span class="nb">sudo </span>nano .config
</code></pre></div></div>

<p>Use <code class="language-plaintext highlighter-rouge">Ctrl+w</code> to search for <code class="language-plaintext highlighter-rouge">CONFIG_SYSTEM_TRUSTED_KEYS</code> on nano and comment out the line like:
<code class="language-plaintext highlighter-rouge">#CONFIG_SYSTEM_TRUSTED_KEYS</code>
<code class="language-plaintext highlighter-rouge">Ctrl+x</code> to Save &amp; Exit</p>

<h3 id="3-apply-patches-acs">3. Apply patches ACS</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>patch <span class="nt">-p1</span> &lt; ../acso.patch
</code></pre></div></div>

<p>Output should be something like this:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>patching file Documentation/admin-guide/kernel-parameters.txt
Hunk <span class="c">#1 succeeded at 3892 (offset 383 lines).</span>
patching file drivers/pci/quirks.c
Hunk <span class="c">#1 succeeded at 3515 with fuzz 2 (offset -29 lines).</span>
Hunk <span class="c">#2 succeeded at 5049 with fuzz 1 (offset 153 lines).</span>
</code></pre></div></div>

<p>This shows a successful patch that required a fuzz (slight offset change) because the patch was made for an earlier kernel version. As long as there isn‚Äôt an error this should be okay.
Run the following command to build the kernel:</p>

<h3 id="4-build-patched-kernel">4. Build patched kernel</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>make <span class="nt">-j</span> <span class="sb">`</span>getconf _NPROCESSORS_ONLN<span class="sb">`</span> bindeb-pkg <span class="nv">LOCALVERSION</span><span class="o">=</span><span class="nt">-acso</span> <span class="nv">KDEB_PKGVERSION</span><span class="o">=</span><span class="si">$(</span>make kernelversion<span class="si">)</span><span class="nt">-1</span>
</code></pre></div></div>

<p>Press Enter for all prompts.</p>

<p><strong>Note:</strong> If you get a build failure remove the ‚Äú-j <code class="language-plaintext highlighter-rouge">getconf _NPROCESSORS_ONLN</code>‚Äù‚Äù part from the make line and run it again to see the error with more detail and fix it.</p>

<h3 id="5-install-the-patched-kernel">5. Install the patched kernel</h3>

<p>When you get a successful build run the following to install the kernel:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> ../linux-<span class="k">*</span>.deb
<span class="nb">sudo </span>dpkg <span class="nt">-i</span> ../linux-<span class="k">*</span>.deb
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo</span> <span class="nt">-i</span>
<span class="nb">echo</span> <span class="s2">"vfio"</span> <span class="o">&gt;&gt;</span> /etc/modules
<span class="nb">echo</span> <span class="s2">"vfio_iommu_type1"</span> <span class="o">&gt;&gt;</span> /etc/modules
<span class="nb">echo</span> <span class="s2">"vfio_pci"</span> <span class="o">&gt;&gt;</span> /etc/modules
<span class="nb">echo</span> <span class="s2">"kvm"</span> <span class="o">&gt;&gt;</span> /etc/modules
<span class="nb">echo</span> <span class="s2">"kvm_intel"</span> <span class="o">&gt;&gt;</span> /etc/modules
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>update-initramfs <span class="nt">-u</span>
reboot
</code></pre></div></div>

<p>When the system rebooting, hold <code class="language-plaintext highlighter-rouge">SHIFT</code> to entering the patched kernel  <code class="language-plaintext highlighter-rouge">Advanced Ubuntu</code> &gt; <code class="language-plaintext highlighter-rouge">5.15.0-acso</code></p>

<h3 id="6-in-case-booting-hang-optional">6. In case booting hang (optional)</h3>

<p>Reboot the system hold <code class="language-plaintext highlighter-rouge">SHIFT</code> to entering the patched kernel  <code class="language-plaintext highlighter-rouge">Advanced Ubuntu</code> &gt; <code class="language-plaintext highlighter-rouge">5.15.0-acso</code></p>

<p>Press <code class="language-plaintext highlighter-rouge">e</code> to edit the grub</p>

<p>Appending <code class="language-plaintext highlighter-rouge">nomodeset</code> in the command line (watch video in the following reference to know the detail)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>linux     /boot/vmlinuz ....    .... downstream nomodeset ...
</code></pre></div></div>

<p>Then press <code class="language-plaintext highlighter-rouge">F10</code> to save and reload.</p>

<p>After rebooting, let‚Äôs check IOMMU group now</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tesla@tesla:~/kvm<span class="nv">$ </span>./iommu_viewer.sh 
Please be patient. This may take a couple seconds.
Group:  0   0000:00:00.0 Host bridge <span class="o">[</span>0600]: Intel Corporation 8th Gen Core 8-core Desktop Processor Host Bridge/DRAM Registers <span class="o">[</span>Coffee Lake S] <span class="o">[</span>8086:3e30] <span class="o">(</span>rev 0a<span class="o">)</span>   Driver: skl_uncore
Group:  1   0000:00:01.0 PCI bridge <span class="o">[</span>0604]: Intel Corporation Xeon E3-1200 v5/E3-1500 v5/6th Gen Core Processor PCIe Controller <span class="o">(</span>x16<span class="o">)</span> <span class="o">[</span>8086:1901] <span class="o">(</span>rev 0a<span class="o">)</span>   Driver: pcieport
Group:  2   0000:00:01.1 PCI bridge <span class="o">[</span>0604]: Intel Corporation Xeon E3-1200 v5/E3-1500 v5/6th Gen Core Processor PCIe Controller <span class="o">(</span>x8<span class="o">)</span> <span class="o">[</span>8086:1905] <span class="o">(</span>rev 0a<span class="o">)</span>   Driver: pcieport
Group:  3   0000:00:12.0 Signal processing controller <span class="o">[</span>1180]: Intel Corporation Cannon Lake PCH Thermal Controller <span class="o">[</span>8086:a379] <span class="o">(</span>rev 10<span class="o">)</span>   Driver: intel_pch_thermal
Group:  4   0000:00:14.0 USB controller <span class="o">[</span>0c03]: Intel Corporation Cannon Lake PCH USB 3.1 xHCI Host Controller <span class="o">[</span>8086:a36d] <span class="o">(</span>rev 10<span class="o">)</span>   Driver: xhci_hcd
Group:  4   0000:00:14.2 RAM memory <span class="o">[</span>0500]: Intel Corporation Cannon Lake PCH Shared SRAM <span class="o">[</span>8086:a36f] <span class="o">(</span>rev 10<span class="o">)</span>
Group:  5   0000:00:14.3 Network controller <span class="o">[</span>0280]: Intel Corporation Wireless-AC 9560 <span class="o">[</span>Jefferson Peak] <span class="o">[</span>8086:a370] <span class="o">(</span>rev 10<span class="o">)</span>   Driver: iwlwifi
Group:  6   0000:00:16.0 Communication controller <span class="o">[</span>0780]: Intel Corporation Cannon Lake PCH HECI Controller <span class="o">[</span>8086:a360] <span class="o">(</span>rev 10<span class="o">)</span>   Driver: mei_me
Group:  7   0000:00:17.0 SATA controller <span class="o">[</span>0106]: Intel Corporation Cannon Lake PCH SATA AHCI Controller <span class="o">[</span>8086:a352] <span class="o">(</span>rev 10<span class="o">)</span>   Driver: ahci
Group:  8   0000:00:1b.0 PCI bridge <span class="o">[</span>0604]: Intel Corporation Cannon Lake PCH PCI Express Root Port <span class="c">#17 [8086:a340] (rev f0)   Driver: pcieport</span>
Group:  9   0000:00:1c.0 PCI bridge <span class="o">[</span>0604]: Intel Corporation Cannon Lake PCH PCI Express Root Port <span class="c">#1 [8086:a338] (rev f0)   Driver: pcieport</span>
Group:  10  0000:00:1d.0 PCI bridge <span class="o">[</span>0604]: Intel Corporation Cannon Lake PCH PCI Express Root Port <span class="c">#9 [8086:a330] (rev f0)   Driver: pcieport</span>
Group:  11  0000:00:1f.0 ISA bridge <span class="o">[</span>0601]: Intel Corporation Z390 Chipset LPC/eSPI Controller <span class="o">[</span>8086:a305] <span class="o">(</span>rev 10<span class="o">)</span>
Group:  11  0000:00:1f.3 Audio device <span class="o">[</span>0403]: Intel Corporation Cannon Lake PCH cAVS <span class="o">[</span>8086:a348] <span class="o">(</span>rev 10<span class="o">)</span>   Driver: snd_hda_intel
Group:  11  0000:00:1f.4 SMBus <span class="o">[</span>0c05]: Intel Corporation Cannon Lake PCH SMBus Controller <span class="o">[</span>8086:a323] <span class="o">(</span>rev 10<span class="o">)</span>   Driver: i801_smbus
Group:  11  0000:00:1f.5 Serial bus controller <span class="o">[</span>0c80]: Intel Corporation Cannon Lake PCH SPI Controller <span class="o">[</span>8086:a324] <span class="o">(</span>rev 10<span class="o">)</span>
Group:  11  0000:00:1f.6 Ethernet controller <span class="o">[</span>0200]: Intel Corporation Ethernet Connection <span class="o">(</span>7<span class="o">)</span> I219-V <span class="o">[</span>8086:15bc] <span class="o">(</span>rev 10<span class="o">)</span>   Driver: e1000e
Group:  12  0000:01:00.0 Processing accelerators <span class="o">[</span>1200]: Xilinx Corporation Device <span class="o">[</span>10ee:5000]   Driver: vfio-pci
Group:  13  0000:01:00.1 Processing accelerators <span class="o">[</span>1200]: Xilinx Corporation Device <span class="o">[</span>10ee:5001]   Driver: vfio-pci
Group:  14  0000:02:00.0 VGA compatible controller <span class="o">[</span>0300]: NVIDIA Corporation Device <span class="o">[</span>10de:2489] <span class="o">(</span>rev a1<span class="o">)</span>   Driver: nvidia
Group:  15  0000:02:00.1 Audio device <span class="o">[</span>0403]: NVIDIA Corporation Device <span class="o">[</span>10de:228b] <span class="o">(</span>rev a1<span class="o">)</span>   Driver: snd_hda_intel
Group:  16  0000:03:00.0 Non-Volatile memory controller <span class="o">[</span>0108]: Samsung Electronics Co Ltd NVMe SSD Controller SM981/PM981/PM983 <span class="o">[</span>144d:a808]   Driver: nvme
Group:  17  0000:05:00.0 Non-Volatile memory controller <span class="o">[</span>0108]: Samsung Electronics Co Ltd NVMe SSD Controller SM981/PM981/PM983 <span class="o">[</span>144d:a808]   Driver: nvme
</code></pre></div></div>

<p>Now, Xilinx card and Nvidia card are in different IOMMU groups</p>

<h3 id="7-change-grub-to-auto-boot-to-patched-kernel">7. Change Grub to auto boot to patched kernel</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nano /etc/default/grub
</code></pre></div></div>

<p>Change</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">GRUB_DEFAULT</span><span class="o">=</span><span class="s2">"1&gt;4"</span>

</code></pre></div></div>

<p>Then,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo update-grub
reboot
</code></pre></div></div>

<p><strong>Note:</strong> The index <code class="language-plaintext highlighter-rouge">1</code> or <code class="language-plaintext highlighter-rouge">4</code> is counted based on the order in the menu (after rebooting, hold <code class="language-plaintext highlighter-rouge">SHIFT</code>).</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ubuntu              (index = 0)
Advanced Ubuntu     (index = 1)
    ubuntu-kernel-xxx           (index = 0)
    ubuntu-kernel-xxx-recovery  (index = 1)
    ubuntu-kernel-xxx           (index = 2)
    ubuntu-kernel-xxx-recovery  (index = 3)
    ubuntu-kernel-xxx           (index = 4)
...
</code></pre></div></div>

<h2 id="c-references">C. References</h2>

<p>Visit <a href="https://www.youtube.com/watch?v=JBEzshbGPhQ">video</a></p>

<p><a href="https://queuecumber.gitlab.io/linux-acs-override/">Patched ACS</a></p>

<p><a href="https://gitlab.com/Queuecumber/linux-acs-override/-/issues/12">Original script - scroll to the end of page</a></p>

<p><a href="https://github.com/benbaker76/linux-acs-override">Repo</a></p>
:ET