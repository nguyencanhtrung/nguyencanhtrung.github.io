I"¯_<h2 id="1-quick-start">1. Quick Start</h2>

<p>Unlike Xilinx EDA tool, Quartus does not provide its own version of simulator, instead users need to use third-party software to do their tasks.</p>

<p>When you download Quartus package, it also contains third-party simulators (Mentor Graphic) which are</p>

<ul>
  <li>Modelsim-Intel SE (ver 21.3 and older) or Questasim-Intel FE (version 22.1 and newer) (activated with Quartus license)</li>
  <li>Modelsim-Intel PE (ver 21.3 and older) or Questasim-Intel FSE (version 22.1 and newer) (extra license needed)</li>
</ul>

<p>The following sections will describe step-by-step how to use modelsim/questasim.</p>

<p>In my case, I am using Questasim-Intel FE version.</p>

<h3 id="installation"><ins><strong>INSTALLATION</strong></ins></h3>

<p>To run modelsim or questasim in batch mode, the program must be in the path of your shell. You can add these lines into your <code class="language-plaintext highlighter-rouge">~/.bashrc</code> after installing Quartus. Changing <code class="language-plaintext highlighter-rouge">/opt/Intel/22.3/</code> to your installation path.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span>/opt/Intel/22.3/quartus/linux64:<span class="nv">$LD_LIBRARY_PATH</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/opt/Intel/22.3/quartus/bin:/opt/Intel/22.3/questa_fe/bin:<span class="nv">$PATH</span>
</code></pre></div></div>

<h3 id="important-commands"><ins><strong>IMPORTANT COMMANDS</strong></ins></h3>

<p>The section is from <a href="https://vhdlwhiz.com/the-modelsim-commands-you-need-to-know/">this source</a></p>

<p><strong>VLIB</strong></p>

<p>The <code class="language-plaintext highlighter-rouge">vlib</code> command creates a design library. You‚Äôve probably used libraries like <code class="language-plaintext highlighter-rouge">ieee</code> or <code class="language-plaintext highlighter-rouge">std</code> in your VHDL code before. But the VHDL code you write must also go into a design library.</p>

<p>The default library in ModelSim is <code class="language-plaintext highlighter-rouge">work</code>. If you create a new VHDL project in the GUI, it will automatically create it for you.</p>

<p>Unless you specify a different location, each design library will appear as a folder in your project folder. For example, the compiled code belonging to the <code class="language-plaintext highlighter-rouge">work</code> library usually resides in a subfolder named <strong>./work</strong>.</p>

<p>Let‚Äôs create the <code class="language-plaintext highlighter-rouge">work</code> library manually using <code class="language-plaintext highlighter-rouge">vlib</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vlib work
</code></pre></div></div>

<p>And delete it using the <code class="language-plaintext highlighter-rouge">vdel</code> command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vdel <span class="nt">-all</span> <span class="nt">-lib</span> work
</code></pre></div></div>

<p><strong>VCOM</strong></p>

<p>This is the <strong>VHDL compiler</strong> command in ModelSim. It‚Äôs easy to compile; type <code class="language-plaintext highlighter-rouge">vcom</code> followed by the path to your VHDL file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vcom ./my_module.vhd
</code></pre></div></div>

<p>Note that when you call <code class="language-plaintext highlighter-rouge">vcom</code> without other arguments, the module ends up in the default <code class="language-plaintext highlighter-rouge">work</code> library.</p>

<p>You can compile it into a different library by giving the <code class="language-plaintext highlighter-rouge">-work</code> switch:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vlib my_lib
vcom <span class="nt">-quiet</span> <span class="nt">-work</span> my_lib ./my_module.vhd
</code></pre></div></div>

<p>(But then you first have to create <code class="language-plaintext highlighter-rouge">my_lib</code> using the <code class="language-plaintext highlighter-rouge">vlib</code> command)</p>

<p>The <code class="language-plaintext highlighter-rouge">vcom</code> command has lots and lots of optional arguments that allow you to control the compilation rules in detail. Check out the ModelSim Reference Manual for a comprehensive list of all the options.</p>

<p>Another note: if you want to use <strong>Verilog compiler</strong>, here is the command</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vlog <span class="nt">-vlog01compat</span> <span class="nt">-work</span> work ./dc_fifo.v
</code></pre></div></div>

<p><strong>VMAP</strong></p>

<p>Using the <code class="language-plaintext highlighter-rouge">vmap</code> tool, you can view and edit the mapping between the VHDL library name and the path to the compiled VHDL code in your file system (the folder you created with <code class="language-plaintext highlighter-rouge">vlib</code> and compiled into using <code class="language-plaintext highlighter-rouge">vcom</code>).</p>

<p>To list all mappings, type <code class="language-plaintext highlighter-rouge">vmap</code> without arguments:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vmap
</code></pre></div></div>

<p>That will print a list of library mappings from which you may recognize some names from. For example, ieee and std. The standard libs are probably located in your ModelSim installation directory as they came with the simulator.</p>

<p>Other libraries like <code class="language-plaintext highlighter-rouge">work</code> will probably map to the current working directory ‚Äú./work‚Äù.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>VSIM 2&gt; vmap
<span class="c"># Questa Intel FPGA Edition-64 vmap 2022.1 Lib Mapping Utility 2022.01 Jan 29 2022</span>
<span class="c"># vmap </span>
<span class="c"># Reading modelsim.ini</span>
<span class="c"># "work" maps to directory ./libraries/work/.</span>
<span class="c"># "work_lib" maps to directory ./libraries/work/.</span>
<span class="c"># "fifo_1911" maps to directory ./libraries/fifo_1911/.</span>
<span class="c"># "dc_fifo" maps to directory ./libraries/dc_fifo/.</span>
<span class="c"># Reading /opt/Intel/22.3/questa_fe/linux_x86_64/../modelsim.ini</span>
<span class="c"># "std" maps to directory /opt/Intel/22.3/questa_fe/linux_x86_64/../std.</span>
<span class="c"># "ieee" maps to directory /opt/Intel/22.3/questa_fe/linux_x86_64/../ieee.</span>
<span class="c"># "vital2000" maps to directory /opt/Intel/22.3/questa_fe/linux_x86_64/../vital2000.</span>
<span class="c"># "verilog" maps to directory /opt/Intel/22.3/questa_fe/linux_x86_64/../verilog.</span>
<span class="c"># "std_developerskit" maps to directory /opt/Intel/22.3/questa_fe/linux_x86_64/../std_developerskit.</span>
<span class="c"># "synopsys" maps to directory /opt/Intel/22.3/questa_fe/linux_x86_64/../synopsys.</span>
<span class="c"># "modelsim_lib" maps to directory /opt/Intel/22.3/questa_fe/linux_x86_64/../modelsim_lib.</span>
</code></pre></div></div>

<p>You can add or update a mapping by typing:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vmap lib_name path/to/the/lib/folder
</code></pre></div></div>

<p>Or, you can delete a library mapping by typing:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vmap <span class="nt">-del</span> lib_name
</code></pre></div></div>

<p>Finally, you should know that <code class="language-plaintext highlighter-rouge">vmap</code> modifies your <code class="language-plaintext highlighter-rouge">modelsim.ini</code> file. The location of modelsim.ini may vary. There‚Äôs one in the ModelSim installation directory, but it‚Äôs often not writable without admin privileges.</p>

<p>If you make the INI file writable, <code class="language-plaintext highlighter-rouge">vmap</code> will happily modify it. But a better strategy is to use the system‚Äôs modelsim.ini file as a template and copy it to your local folder by using the special ‚Äú-c‚Äù switch:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vmap <span class="nt">-c</span>
</code></pre></div></div>

<p>Then you can set an environment variable pointing to this file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set </span><span class="nv">MODELSIM</span><span class="o">=</span>&lt;project_dir&gt;/modelsim.ini
</code></pre></div></div>

<p>When you now call <code class="language-plaintext highlighter-rouge">vmap</code> or any other command that relies on the INI file, it will use the local copy of <code class="language-plaintext highlighter-rouge">modelsim.ini</code>.</p>

<p><strong>VSIM</strong></p>

<p>This is the command that starts the VHDL simulator (ModelSim). If you call <code class="language-plaintext highlighter-rouge">vsim</code> from a shell without any arguments, the <strong>ModelSim GUI</strong> will open:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vsim
</code></pre></div></div>

<p>Running <strong>batch mode</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vsim <span class="nt">-c</span>
</code></pre></div></div>

<p>Another useful switch is ‚Äú-do‚Äù, which <ins>lets you specify a command that ModelSim will run when it opens</ins>. Here, we combine it with the ‚Äú-c‚Äù flag to print ‚ÄúHello World!‚Äù to the console and exit:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vsim <span class="nt">-c</span> <span class="nt">-do</span> <span class="s2">"echo Hello World!; exit"</span>
</code></pre></div></div>

<p>And, of course, you can simulate from the command line. Just give the library and entity of the testbench and combine it with the ‚Äú-do‚Äù switch to start the simulation like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vsim <span class="nt">-c</span> my_lib.my_tb <span class="nt">-do</span> <span class="s2">"run -all"</span>
</code></pre></div></div>

<p>If you start a batch mode simulation from a script or a Makefile, you may want to return an exit code that you can pick up in your script. The exit command in ModelSim has a <code class="language-plaintext highlighter-rouge">-code</code> switch that lets you do this.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vcom <span class="nt">-quiet</span> <span class="nt">-2008</span> <span class="nt">-work</span> counter_lib ./counter.vhd
vcom <span class="nt">-quiet</span> <span class="nt">-2008</span> <span class="nt">-work</span> counter_lib ./counter_tb.vhd
vsim <span class="nt">-c</span> counter_lib.counter_tb <span class="nt">-do</span> <span class="s2">"run -all; exit -code 0"</span>
</code></pre></div></div>

<p><strong>MODELSIM REFERENCE MANUAL PDF</strong></p>

<p>If you want to dig deeper into these and other ModelSim commands, I recommend checking out the <a href="https://www.microsemi.com/document-portal/doc_view/131617-modelsim-reference-manual">ModelSim Reference Manual</a>. It‚Äôs 455 pages long and lists all the possible ModelSim commands along with their optional switches.</p>

<p>Or you can access it from within ModelSim by clicking: Help -&gt; PDF Documentation -&gt; Reference Manual.</p>

<h2 id="2-what-need-to-run-simulation">2. What need to run simulation</h2>

<p>In order to run simulation on Model/Questa-sim, you need to prepare 3 things</p>

<ul>
  <li>Unit Under Test (UUT): Includes design source codes</li>
  <li>Testbench</li>
  <li>Scripts</li>
</ul>

<p>For 2 formers, no need to discuss more since it is straight-forward. The later is what you need to study more if you switched from other simulator such as XSIM (Xililnx).</p>

<h3 id="scripting"><ins>Scripting</ins></h3>

<p>There are 3 important scripts that are used for simulation.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Scripts</th>
      <th style="text-align: left">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">msim_setup.tcl</code></td>
      <td style="text-align: left">Generated by Quartus</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">modelsim_files.tcl</code></td>
      <td style="text-align: left">Generated by Quartus</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">*.do</code></td>
      <td style="text-align: left">Defined by User</td>
    </tr>
  </tbody>
</table>

<p><strong>‚Äúmodelsim_files.tcl‚Äù</strong></p>

<p>Design-independent file. It defines:</p>

<p>‚ÄÉSpecific <strong>libraries</strong></p>

<p>‚ÄÉ<strong>Design files</strong> corresponding to these specific libraries</p>

<p>‚ÄÉ<strong>Memory files</strong></p>

<p>If your design using IPs from IP Catalog, libraries that those IPs used and its design will be specified in this file. When <code class="language-plaintext highlighter-rouge">"Generate Simulator Setup Script"</code>, this file is generated and includes all needed information.</p>

<p>Here is an example of a design using DC_FIFO provided in IP catalog.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>proc get_design_libraries <span class="o">{}</span> <span class="o">{</span>
  <span class="nb">set </span>libraries <span class="o">[</span>dict create]
  dict <span class="nb">set </span>libraries fifo_1911 1
  dict <span class="nb">set </span>libraries dc_fifo   1
  <span class="k">return</span> <span class="nv">$libraries</span>
<span class="o">}</span>

proc get_memory_files <span class="o">{</span>QSYS_SIMDIR<span class="o">}</span> <span class="o">{</span>
  <span class="nb">set </span>memory_files <span class="o">[</span>list]
  <span class="k">return</span> <span class="nv">$memory_files</span>
<span class="o">}</span>

proc get_common_design_files <span class="o">{</span>USER_DEFINED_COMPILE_OPTIONS USER_DEFINED_VERILOG_COMPILE_OPTIONS USER_DEFINED_VHDL_COMPILE_OPTIONS QSYS_SIMDIR<span class="o">}</span> <span class="o">{</span>
  <span class="nb">set </span>design_files <span class="o">[</span>dict create]
  <span class="k">return</span> <span class="nv">$design_files</span>
<span class="o">}</span>

proc get_design_files <span class="o">{</span>USER_DEFINED_COMPILE_OPTIONS USER_DEFINED_VERILOG_COMPILE_OPTIONS USER_DEFINED_VHDL_COMPILE_OPTIONS SIM_DIR<span class="o">}</span> <span class="o">{</span>
  <span class="nb">set </span>design_files <span class="o">[</span>list]
  lappend design_files <span class="s2">"vcom </span><span class="nv">$USER_DEFINED_VHDL_COMPILE_OPTIONS</span><span class="s2"> </span><span class="nv">$USER_DEFINED_COMPILE_OPTIONS</span><span class="s2">  </span><span class="se">\"</span><span class="s2">[normalize_path "</span><span class="nv">$SIM_DIR</span>/02.uut/01.fw_bm/dc_fifo/fifo_1911/sim/dc_fifo_fifo_1911_nytavei.vhd<span class="s2">"]</span><span class="se">\"</span><span class="s2">  -work fifo_1911"</span>
  lappend design_files <span class="s2">"vcom </span><span class="nv">$USER_DEFINED_VHDL_COMPILE_OPTIONS</span><span class="s2"> </span><span class="nv">$USER_DEFINED_COMPILE_OPTIONS</span><span class="s2">  </span><span class="se">\"</span><span class="s2">[normalize_path "</span><span class="nv">$SIM_DIR</span>/02.uut/01.fw_bm/dc_fifo/sim/dc_fifo.vhd<span class="s2">"]</span><span class="se">\"</span><span class="s2">  -work dc_fifo"</span>                              
  <span class="k">return</span> <span class="nv">$design_files</span>
  <span class="k">return</span> <span class="nv">$design_files</span>
<span class="o">}</span>

proc get_elab_options <span class="o">{</span>SIMULATOR_TOOL_BITNESS<span class="o">}</span> <span class="o">{</span>
  <span class="nb">set </span>ELAB_OPTIONS <span class="s2">""</span>
  <span class="k">if</span> <span class="o">![</span> string match <span class="s2">"bit_64"</span> <span class="nv">$SIMULATOR_TOOL_BITNESS</span> <span class="o">]</span> <span class="o">{</span>
  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
  <span class="o">}</span>
  append ELAB_OPTIONS <span class="o">{</span> <span class="nt">-t</span> fs<span class="o">}</span>
  <span class="k">return</span> <span class="nv">$ELAB_OPTIONS</span>
<span class="o">}</span>


proc get_sim_options <span class="o">{</span>SIMULATOR_TOOL_BITNESS<span class="o">}</span> <span class="o">{</span>
  <span class="nb">set </span>SIM_OPTIONS <span class="s2">""</span>
  <span class="k">if</span> <span class="o">![</span> string match <span class="s2">"bit_64"</span> <span class="nv">$SIMULATOR_TOOL_BITNESS</span> <span class="o">]</span> <span class="o">{</span>
  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="nv">$SIM_OPTIONS</span>
<span class="o">}</span>


proc get_env_variables <span class="o">{</span>SIMULATOR_TOOL_BITNESS<span class="o">}</span> <span class="o">{</span>
  <span class="nb">set </span>ENV_VARIABLES <span class="o">[</span>dict create]
  <span class="nb">set </span>LD_LIBRARY_PATH <span class="o">[</span>dict create]
  dict <span class="nb">set </span>ENV_VARIABLES <span class="s2">"LD_LIBRARY_PATH"</span> <span class="nv">$LD_LIBRARY_PATH</span>
  <span class="k">if</span> <span class="o">![</span> string match <span class="s2">"bit_64"</span> <span class="nv">$SIMULATOR_TOOL_BITNESS</span> <span class="o">]</span> <span class="o">{</span>
  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="nv">$ENV_VARIABLES</span>
<span class="o">}</span>


proc normalize_path <span class="o">{</span>FILEPATH<span class="o">}</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">{[</span>catch <span class="o">{</span> package require fileutil <span class="o">}</span> err]<span class="o">}</span> <span class="o">{</span> 
        <span class="k">return</span> <span class="nv">$FILEPATH</span> 
    <span class="o">}</span> 
    <span class="nb">set </span>path <span class="o">[</span>fileutil::lexnormalize <span class="o">[</span>file <span class="nb">join</span> <span class="o">[</span><span class="nb">pwd</span><span class="o">]</span> <span class="nv">$FILEPATH</span><span class="o">]]</span>  
    <span class="k">if</span> <span class="o">{[</span>file pathtype <span class="nv">$FILEPATH</span><span class="o">]</span> eq <span class="s2">"relative"</span><span class="o">}</span> <span class="o">{</span> 
        <span class="nb">set </span>path <span class="o">[</span>fileutil::relative <span class="o">[</span><span class="nb">pwd</span><span class="o">]</span> <span class="nv">$path</span><span class="o">]</span> 
    <span class="o">}</span> 
    <span class="k">return</span> <span class="nv">$path</span> 
<span class="o">}</span> 

</code></pre></div></div>

<p>In this example, I used 2 libraries which are generated when calling FIFO IP core from IP Catalog: <code class="language-plaintext highlighter-rouge">fifo_1911</code> and <code class="language-plaintext highlighter-rouge">dc_fifo</code></p>

<p>Then, you see in <code class="language-plaintext highlighter-rouge">get_design_files</code> is where design added in two libraries with <code class="language-plaintext highlighter-rouge">vcom</code> command.</p>

<p>Note that this file is kind of declaration file, it will be used in the later file <code class="language-plaintext highlighter-rouge">msim_setup.tcl</code></p>

<p><strong>‚Äúmsim_setup.tcl‚Äù</strong></p>

<p>This file sets up the enviroment for simulation run.</p>

<p><strong>‚Äù*.do‚Äù</strong></p>

<p>So to do ‚ÄúStandard-Alone‚Äù simulation, you just need to copy 3 scripts above along with source codes and testbenches, you will be able to run your simulation in other machine.</p>

<h2 id="3-design-with-no-third-party-ip-cores">3. Design with no third party IP Cores</h2>

<p>ƒê·ªëi v·ªõi h·ªá th·ªëng kh√¥ng s·ª≠ d·ª•ng c√°c IP t·ª´ Intel th√¨ c√≥ th·ªÉ t·∫°o project, bi√™n d·ªãch v√† m√¥ ph·ªèng tr·ª±c ti·∫øp v·ªõi modelsim theo flow sau ƒë√¢y</p>

<p>https://www.intel.com/content/www/us/en/support/programmable/support-resources/design-examples/quartus/simulation-manual-howto.html</p>

<h2 id="4-design-with-intel-ip-cores">4. Design with Intel IP Cores</h2>

<p>If a design using Intel IP, <strong>Generate Simulator Setup Scrupt for IP</strong> is needed to extract all libraries for simulation.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Tools <span class="o">&gt;</span> Generate Simulator Setup Script <span class="k">for </span>IP ...
</code></pre></div></div>

<p>One note: If you <strong>generate HDL</strong> from IP Editor, you need to check the ‚ÄúGenerate simulation model‚Äù option of IP cores. Missing it, script generation will be failed due to miss simulation model.</p>

<p>Please following the example <a href="https://www.intel.com/content/www/us/en/docs/programmable/683305/19-4/simulation-quick-start.html"><ins><strong>here</strong></ins></a> to simulate a project using Intel IP Cores</p>

<p>The following is a complete <code class="language-plaintext highlighter-rouge">mentor_example.do</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set </span>QSYS_SIMDIR ../
<span class="c"># #</span>
<span class="c"># # Source the generated IP simulation script.</span>
<span class="nb">source</span> <span class="nv">$QSYS_SIMDIR</span>/mentor/msim_setup.tcl
<span class="c"># #</span>
dev_com
<span class="c"># #</span>
<span class="c"># # Call command to compile the Quartus-generated IP simulation files.</span>
com
<span class="c"># #</span>
<span class="c"># # Add commands to compile all design files and testbench files, including</span>
<span class="c"># # the top level. (These are all the files required for simulation other</span>
<span class="c"># # than the files compiled by the Quartus-generated IP simulation script)</span>
vcom <span class="nt">-work</span> work ../src/dc_fifo/sim/dc_fifo.vhd
vcom <span class="nt">-work</span> work ../src/axi_lite_ctrl_S_AXI_LITE.vhd
vcom <span class="nt">-work</span> work ../src/axi_lite_ctrl.vhd
vcom <span class="nt">-work</span> work ../src/axis_handler.vhd
vcom <span class="nt">-work</span> work ../src/adapter.vhd
vcom <span class="nt">-work</span> work ../src/tb.vhd

<span class="c"># #</span>
<span class="c"># # Set the top-level simulation or testbench module/entity name, which is</span>
<span class="c"># # used by the elab command to elaborate the top level.</span>
<span class="nb">set </span>TOP_LEVEL_NAME tb
<span class="c"># #</span>
<span class="c"># # Set any elaboration options you require.</span>
elab_debug
<span class="c"># #</span>
<span class="c"># # Run the simulation.</span>
<span class="c"># run -a</span>
add wave <span class="k">*</span>

view structure
view signals
<span class="c"># run -all</span>
run 1 us

</code></pre></div></div>

<h2 id="how-to-stop-a-simulator">How to stop a simulator</h2>

<p>https://vhdlwhiz.com/how-to-stop-testbench/</p>

<h3 id="simulating-nios-ii">Simulating NIOS II</h3>

<p>https://www.youtube.com/watch?v=Jw3rr76QEIc</p>

<p>[1] https://community.intel.com/t5/Nios-II-Embedded-Design-Suite/update-for-AN351/m-p/1351699#M51062
[2] https://community.intel.com/t5/Nios-II-Embedded-Design-Suite/AN351-really-confused-me/m-p/1351698#M51061
[3] https://community.intel.com/t5/Nios-II-Embedded-Design-Suite/Nios-II-simulation-with-Questa/m-p/1351656#M51059</p>

:ET