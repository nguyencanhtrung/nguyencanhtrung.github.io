I"qs<h2 id="mục-đích">Mục đích</h2>

<ul>
  <li>Sử dụng g++ đi kèm với Catapult để biên dịch C/C++ model</li>
  <li>Biết đường dẫn của thư viện C/C++ của Catapult cũng như cách thêm thư viện vào khi biên dịch</li>
  <li>Debug lỗi data types</li>
  <li>Hiểu về cách hoạt động của phép dịch trái với AC data types</li>
</ul>

<h2 id="makefile">Makefile</h2>

<p>Makefile bao gồm những thành phần sau để thực hiện được việc compiling C/C++ model</p>

<table>
  <tbody>
    <tr>
      <td>Thư viện</td>
      <td><code class="language-plaintext highlighter-rouge">IDIR =$(MGC_HOME)/shared/include</code></td>
    </tr>
    <tr>
      <td>g++</td>
      <td><code class="language-plaintext highlighter-rouge">CC=$(MGC_HOME)/bin/g++</code></td>
    </tr>
    <tr>
      <td>C flag</td>
      <td><code class="language-plaintext highlighter-rouge">CFLAGS=-g</code></td>
    </tr>
    <tr>
      <td>Debugger</td>
      <td><code class="language-plaintext highlighter-rouge">$(MGC_HOME)/bin/gdb</code></td>
    </tr>
  </tbody>
</table>

<p>Makefile example:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>IDIR <span class="o">=</span><span class="si">$(</span>MGC_HOME<span class="si">)</span>/shared/include
TDIR ?<span class="o">=</span> <span class="si">$(</span>MGC_HOME<span class="si">)</span>/tmp
<span class="nv">CC</span><span class="o">=</span><span class="si">$(</span>MGC_HOME<span class="si">)</span>/bin/g++
<span class="nv">CFLAGS</span><span class="o">=</span><span class="nt">-g</span>

tb0: tb_pod_err.cpp test_chan_assert.cpp
  <span class="si">$(</span>CC<span class="si">)</span> <span class="nt">-o</span> <span class="si">$(</span>TDIR<span class="si">)</span>/tb tb_pod_err.cpp test.cpp <span class="nt">-I</span><span class="si">$(</span>IDIR<span class="si">)</span> <span class="si">$(</span>CFLAGS<span class="si">)</span>
tb1: tb.cpp test_chan_assert.cpp
  <span class="si">$(</span>CC<span class="si">)</span> <span class="nt">-o</span> <span class="si">$(</span>TDIR<span class="si">)</span>/tb tb.cpp test_chan_assert.cpp <span class="nt">-I</span><span class="si">$(</span>IDIR<span class="si">)</span> <span class="si">$(</span>CFLAGS<span class="si">)</span>
  <span class="si">$(</span>TDIR<span class="si">)</span>/tb
tb1_debug: tb.cpp test_chan_assert.cpp
  <span class="si">$(</span>CC<span class="si">)</span> <span class="nt">-o</span> <span class="si">$(</span>TDIR<span class="si">)</span>/tb tb.cpp test_chan_assert.cpp <span class="nt">-I</span><span class="si">$(</span>IDIR<span class="si">)</span> <span class="si">$(</span>CFLAGS<span class="si">)</span>
  <span class="si">$(</span>MGC_HOME<span class="si">)</span>/bin/gdb <span class="si">$(</span>TDIR<span class="si">)</span>/tb
tb2: tb.cpp test_shift_loss.cpp
  <span class="si">$(</span>CC<span class="si">)</span> <span class="nt">-o</span> <span class="si">$(</span>TDIR<span class="si">)</span>/tb tb.cpp test_shift_loss.cpp <span class="nt">-I</span><span class="si">$(</span>IDIR<span class="si">)</span> <span class="si">$(</span>CFLAGS<span class="si">)</span>
  <span class="si">$(</span>TDIR<span class="si">)</span>/tb
tb3: tb.cpp test.cpp
  <span class="si">$(</span>CC<span class="si">)</span> <span class="nt">-o</span> <span class="si">$(</span>TDIR<span class="si">)</span>/tb tb.cpp test.cpp <span class="nt">-I</span><span class="si">$(</span>IDIR<span class="si">)</span> <span class="si">$(</span>CFLAGS<span class="si">)</span>
  <span class="si">$(</span>TDIR<span class="si">)</span>/tb

.PHONY: clean
clean:
  <span class="nb">rm</span> <span class="nt">-f</span> <span class="si">$(</span>TDIR<span class="si">)</span>/tb 
</code></pre></div></div>

<h3 id="compiling-cmd">Compiling cmd</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="si">$(</span>CC<span class="si">)</span> <span class="nt">-o</span> <span class="si">$(</span>TDIR<span class="si">)</span>/tb tb.cpp tb.cpp test_chan_assert.cpp <span class="nt">-I</span><span class="si">$(</span>IDIR<span class="si">)</span> <span class="si">$(</span>CFLAGS<span class="si">)</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">-o $(TDIR)/tb</code> : compile and put output file named <code class="language-plaintext highlighter-rouge">tb</code> at <code class="language-plaintext highlighter-rouge">$(TDIR)</code></li>
  <li><code class="language-plaintext highlighter-rouge">test_chan_assert.cpp</code>: source files</li>
  <li><code class="language-plaintext highlighter-rouge">-I$(IDIR)</code> : include library which stores in <code class="language-plaintext highlighter-rouge">IDIR</code> variable</li>
  <li><code class="language-plaintext highlighter-rouge">$CFLAGS</code> : C flag</li>
</ul>

<h3 id="debuging-cmd">Debuging cmd</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="si">$(</span>MGC_HOME<span class="si">)</span>/bin/gdb <span class="si">$(</span>TDIR<span class="si">)</span>/tb
</code></pre></div></div>

<h2 id="section-1">Section 1</h2>

<h4 id="understand-makefile-and-simple-errors">Understand makefile and simple errors</h4>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="c1">//test_chan_assert.cpp</span>

<span class="cp">#include</span> <span class="cpf">"test.h"</span><span class="cp">
</span>
<span class="kt">void</span> <span class="nf">test</span><span class="p">(</span><span class="n">ac_int</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">,</span><span class="nb">false</span><span class="o">&gt;</span>                   <span class="n">data0</span><span class="p">,</span>
          <span class="n">ac_fixed</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="nb">false</span><span class="o">&gt;</span>               <span class="n">data1</span><span class="p">,</span>
          <span class="n">ac_channel</span><span class="o">&lt;</span><span class="n">ac_int</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">,</span><span class="nb">false</span><span class="o">&gt;</span> <span class="o">&gt;</span>      <span class="o">&amp;</span><span class="n">chan_in</span><span class="p">,</span>
          <span class="n">ac_int</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">,</span><span class="nb">false</span><span class="o">&gt;</span>                   <span class="o">&amp;</span><span class="n">wrap_behavior</span><span class="p">,</span>
          <span class="n">ac_fixed</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="nb">false</span><span class="p">,</span><span class="n">AC_RND</span><span class="p">,</span><span class="n">AC_SAT</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">sat_behavior</span><span class="p">,</span>
          <span class="n">ac_int</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">,</span><span class="nb">false</span><span class="o">&gt;</span>                   <span class="o">&amp;</span><span class="n">shift_behavior</span><span class="p">,</span>
          <span class="n">ac_channel</span><span class="o">&lt;</span><span class="n">ac_int</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">,</span><span class="nb">false</span><span class="o">&gt;</span> <span class="o">&gt;</span>      <span class="o">&amp;</span><span class="n">chan_out</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">wrap_behavior</span> <span class="o">=</span> <span class="n">data0</span><span class="p">;</span>               <span class="c1">// will wrap for values &gt; 7</span>
  <span class="n">sat_behavior</span> <span class="o">=</span> <span class="n">data1</span><span class="p">;</span>                <span class="c1">// will clamp to 7 for values &gt; 7</span>
  <span class="n">shift_behavior</span> <span class="o">=</span> <span class="n">data0</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">;</span>         <span class="c1">// will lose MSB after shift</span>

  <span class="n">chan_out</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">chan_in</span><span class="p">.</span><span class="n">read</span><span class="p">());</span>      <span class="c1">// will assert if read of empty </span>
                                       <span class="c1">// channel is attempted</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="c1">// tb_pod_err.cpp</span>

<span class="cp">#include</span> <span class="cpf">"test.h"</span><span class="cp">
</span>
<span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;fstream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">ac_int</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">,</span><span class="nb">false</span><span class="o">&gt;</span> <span class="n">data0</span><span class="p">;</span> <span class="c1">// 4 bit unsigned, 0 to 15</span>
  <span class="n">ac_fixed</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="nb">false</span><span class="o">&gt;</span> <span class="n">data1</span><span class="p">;</span>
  <span class="n">ac_channel</span><span class="o">&lt;</span><span class="n">ac_int</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">,</span><span class="nb">false</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">chan_in</span><span class="p">;</span>
  <span class="n">ac_int</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">,</span><span class="nb">false</span><span class="o">&gt;</span> <span class="n">wrap_behavior</span><span class="p">;</span>
  <span class="n">ac_fixed</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="nb">false</span><span class="p">,</span><span class="n">AC_RND</span><span class="p">,</span><span class="n">AC_SAT</span><span class="o">&gt;</span> <span class="n">sat_behavior</span><span class="p">;</span>
  <span class="n">ac_int</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">,</span><span class="nb">false</span><span class="o">&gt;</span> <span class="n">shift_behavior</span><span class="p">;</span>
  <span class="n">ac_channel</span><span class="o">&lt;</span><span class="n">ac_int</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">,</span><span class="nb">false</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">chan_out</span><span class="p">;</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">16</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">chan_in</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">data0</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
    <span class="n">data1</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>

    <span class="n">test</span><span class="p">(</span><span class="n">data0</span><span class="p">,</span><span class="n">data1</span><span class="p">,</span><span class="n">chan_in</span><span class="p">,</span><span class="n">wrap_behavior</span><span class="p">,</span><span class="n">sat_behavior</span><span class="p">,</span><span class="n">shift_behavior</span><span class="p">,</span><span class="n">chan_out</span><span class="p">);</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"Input = %3d "</span><span class="p">,</span><span class="n">data0</span><span class="p">.</span><span class="n">to_uint</span><span class="p">());</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"wrap_behavior = %3d, "</span><span class="p">,</span><span class="n">wrap_behavior</span><span class="p">.</span><span class="n">to_uint</span><span class="p">());</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"sat_behavior = %3d, "</span><span class="p">,</span><span class="n">sat_behavior</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"shift_behavior = %3d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">shift_behavior</span><span class="p">.</span><span class="n">to_uint</span><span class="p">());</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>Compiling status</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>administrator@centos lab1]<span class="nv">$ </span>make tb0
/opt/tools/Mentor/Catapult_2022.1_1/Mgc_home/bin/g++ <span class="nt">-o</span> /opt/tools/Mentor/Catapult_2022.1_1/Mgc_home/tmp/tb tb_pod_err.cpp test.cpp <span class="nt">-I</span>/opt/tools/Mentor/Catapult_2022.1_1/Mgc_home/shared/include <span class="nt">-g</span>
tb_pod_err.cpp: In <span class="k">function</span> ‘int main<span class="o">()</span>’:
tb_pod_err.cpp:31:47: error: cannot pass objects of non-trivially-copyable <span class="nb">type</span> ‘class ac_fixed&lt;3, 3, <span class="nb">false</span>, <span class="o">(</span>ac_q_mode<span class="o">)</span>1u, <span class="o">(</span>ac_o_mode<span class="o">)</span>1u&gt;’ through ‘...’
     <span class="nb">printf</span><span class="o">(</span><span class="s2">"sat_behavior = %3d, "</span>,sat_behavior<span class="o">)</span><span class="p">;</span>
                                               ^
make: <span class="k">***</span> <span class="o">[</span>tb0] Error 1
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">sat_behavior</code> là kiểu <code class="language-plaintext highlighter-rouge">ac_fixed</code> do đó nó cần gọi method để convert về dạng unsigned integer.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">printf</span><span class="o">(</span><span class="s2">"sat_behavior = %3d, "</span>,sat_behavior.to_uint<span class="o">())</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="section-2">Section 2</h2>
<h4 id="working-with-debugger-dbg-to-trace-back-the-error-cause-in-source-code">Working with debugger (dbg) to trace back the error cause in source code</h4>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="c1">// tb.cpp</span>
<span class="cp">#include</span> <span class="cpf">"test.h"</span><span class="cp">
</span>
<span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;fstream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">ac_int</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">,</span><span class="nb">false</span><span class="o">&gt;</span> <span class="n">data0</span><span class="p">;</span> <span class="c1">// 4 bit unsigned, 0 to 15</span>
  <span class="n">ac_fixed</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="nb">false</span><span class="o">&gt;</span> <span class="n">data1</span><span class="p">;</span>
  <span class="n">ac_channel</span><span class="o">&lt;</span><span class="n">ac_int</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">,</span><span class="nb">false</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">chan_in</span><span class="p">;</span>
  <span class="n">ac_int</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">,</span><span class="nb">false</span><span class="o">&gt;</span> <span class="n">wrap_behavior</span><span class="p">;</span>
  <span class="n">ac_fixed</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="nb">false</span><span class="p">,</span><span class="n">AC_RND</span><span class="p">,</span><span class="n">AC_SAT</span><span class="o">&gt;</span> <span class="n">sat_behavior</span><span class="p">;</span>
  <span class="n">ac_int</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">,</span><span class="nb">false</span><span class="o">&gt;</span> <span class="n">shift_behavior</span><span class="p">;</span>
  <span class="n">ac_channel</span><span class="o">&lt;</span><span class="n">ac_int</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">,</span><span class="nb">false</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">chan_out</span><span class="p">;</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">16</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">chan_in</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">data0</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
    <span class="n">data1</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>

    <span class="n">test</span><span class="p">(</span><span class="n">data0</span><span class="p">,</span><span class="n">data1</span><span class="p">,</span><span class="n">chan_in</span><span class="p">,</span><span class="n">wrap_behavior</span><span class="p">,</span><span class="n">sat_behavior</span><span class="p">,</span><span class="n">shift_behavior</span><span class="p">,</span><span class="n">chan_out</span><span class="p">);</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"Input = %3d "</span><span class="p">,</span><span class="n">data0</span><span class="p">.</span><span class="n">to_uint</span><span class="p">());</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"wrap_behavior = %3d, "</span><span class="p">,</span><span class="n">wrap_behavior</span><span class="p">.</span><span class="n">to_uint</span><span class="p">());</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"sat_behavior = %3d, "</span><span class="p">,</span><span class="n">sat_behavior</span><span class="p">.</span><span class="n">to_uint</span><span class="p">());</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"shift_behavior = %3d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">shift_behavior</span><span class="p">.</span><span class="n">to_uint</span><span class="p">());</span>
  <span class="p">}</span>

  <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Channel data = "</span><span class="p">);</span>

  <span class="k">while</span> <span class="p">(</span><span class="n">chan_out</span><span class="p">.</span><span class="n">available</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// while data in channel, keep reading</span>
    <span class="n">ac_int</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">,</span><span class="nb">false</span><span class="o">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="n">chan_out</span><span class="p">.</span><span class="n">read</span><span class="p">();</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%2d "</span><span class="p">,</span><span class="n">data</span><span class="p">.</span><span class="n">to_uint</span><span class="p">());</span>
  <span class="p">}</span>

  <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>Compiling status</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make tb1
/opt/tools/Mentor/Catapult_2022.1_1/Mgc_home/bin/g++ <span class="nt">-o</span> /opt/tools/Mentor/Catapult_2022.1_1/Mgc_home/tmp/tb tb.cpp test_chan_assert.cpp <span class="nt">-I</span>/opt/tools/Mentor/Catapult_2022.1_1/Mgc_home/shared/include <span class="nt">-g</span>
/opt/tools/Mentor/Catapult_2022.1_1/Mgc_home/tmp/tb
Assert <span class="k">in </span>file /opt/tools/Mentor/Catapult_2022.1_1/Mgc_home/shared/include/ac_channel.h:229 Read from empty channel
tb: /opt/tools/Mentor/Catapult_2022.1_1/Mgc_home/shared/include/ac_channel.h:175: static void ac_channel&lt;T&gt;::ac_assert<span class="o">(</span>bool, const char<span class="k">*</span>, int, const ac_channel_exception::code&amp;<span class="o">)</span> <span class="o">[</span>with T <span class="o">=</span> ac_int&lt;4, <span class="nb">false</span><span class="o">&gt;]</span>: Assertion <span class="sb">`</span>0<span class="s1">' failed.
make: *** [tb1] Aborted (core dumped)
[administrator@centos lab1]$ 

</span></code></pre></div></div>

<p>Lỗi này xảy ra khi xảy ra trường hợp đọc data từ empty channel. Ở error message, ta chỉ có thể nhìn thấy đoạn thông tin assert trong thư viện <code class="language-plaintext highlighter-rouge">ac_channel</code>. Để backtrack tới đoạn code lỗi, dbg được sử dụng như sau:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="si">$(</span>MGC_HOME<span class="si">)</span>/bin/gdb <span class="si">$(</span>TDIR<span class="si">)</span>/tb
</code></pre></div></div>

<p>Chạy debugger (gdb)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>gdb<span class="o">)</span> run
</code></pre></div></div>

<p>Gõ <code class="language-plaintext highlighter-rouge">up</code> để kiểm tra theo thứ tự từ trong ra ngoài của hierarchy, để phát hiện lỗi ở user source code.</p>

<p>Sau đó, gõ <code class="language-plaintext highlighter-rouge">quit</code> để thoát.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Program received signal SIGABRT, Aborted.
0x00007ffff7223387 <span class="k">in </span>raise <span class="o">()</span> from /lib64/libc.so.6
<span class="o">(</span>gdb<span class="o">)</span> up
<span class="c">#1  0x00007ffff7224a78 in abort () from /lib64/libc.so.6</span>
<span class="o">(</span>gdb<span class="o">)</span> ip
Undefined <span class="nb">command</span>: <span class="s2">"ip"</span><span class="nb">.</span>  Try <span class="s2">"help"</span><span class="nb">.</span>
<span class="o">(</span>gdb<span class="o">)</span> up
<span class="c">#2  0x00007ffff721c1a6 in __assert_fail_base () from /lib64/libc.so.6</span>
<span class="o">(</span>gdb<span class="o">)</span> up
<span class="c">#3  0x00007ffff721c252 in __assert_fail () from /lib64/libc.so.6</span>
<span class="o">(</span>gdb<span class="o">)</span> up
<span class="c">#4  0x0000000000401b1f in ac_channel&lt;ac_int&lt;4, false&gt; &gt;::ac_assert (condition=false, </span>
    <span class="nv">file</span><span class="o">=</span>0x4039c8 <span class="s2">"/opt/tools/Mentor/Catapult_2022.1_1/Mgc_home/shared/include/ac_channel.h"</span>, <span class="nv">line</span><span class="o">=</span>229, 
    <span class="nv">code</span><span class="o">=</span>@0x7fffffffd88c: ac_channel_exception::read_from_empty_channel<span class="o">)</span>
    at /opt/tools/Mentor/Catapult_2022.1_1/Mgc_home/shared/include/ac_channel.h:175
175           assert<span class="o">(</span>0<span class="o">)</span><span class="p">;</span>
<span class="o">(</span>gdb<span class="o">)</span> up
<span class="c">#5  0x00000000004026c2 in ac_channel&lt;ac_int&lt;4, false&gt; &gt;::fifo::fifo_ac_channel::read (this=0x608010)</span>
    at /opt/tools/Mentor/Catapult_2022.1_1/Mgc_home/shared/include/ac_channel.h:229
229           AC_CHANNEL_ASSERT<span class="o">(!</span>empty<span class="o">()</span>, ac_channel_exception::read_from_empty_channel<span class="o">)</span><span class="p">;</span>
<span class="o">(</span>gdb<span class="o">)</span> up
<span class="c">#6  0x0000000000401755 in ac_channel&lt;ac_int&lt;4, false&gt; &gt;::fifo::read (this=0x7fffffffd9e0)</span>
    at /opt/tools/Mentor/Catapult_2022.1_1/Mgc_home/shared/include/ac_channel.h:402
402     inline T <span class="nb">read</span><span class="o">()</span> <span class="o">{</span> <span class="k">return </span>f-&gt;read<span class="o">()</span><span class="p">;</span> <span class="o">}</span>
<span class="o">(</span>gdb<span class="o">)</span> up
<span class="c">#7  0x000000000040152e in ac_channel&lt;ac_int&lt;4, false&gt; &gt;::read (this=0x7fffffffd9e0)</span>
    at /opt/tools/Mentor/Catapult_2022.1_1/Mgc_home/shared/include/ac_channel.h:118
118   T <span class="nb">read</span><span class="o">()</span> <span class="o">{</span> <span class="k">return </span>chan.read<span class="o">()</span><span class="p">;</span> <span class="o">}</span>
<span class="o">(</span>gdb<span class="o">)</span> up
<span class="c">#8  0x0000000000403465 in test (data0=..., data1=..., chan_in=..., wrap_behavior=..., sat_behavior=..., </span>
    <span class="nv">shift_behavior</span><span class="o">=</span>..., <span class="nv">chan_out</span><span class="o">=</span>...<span class="o">)</span> at test_chan_assert.cpp:18
18    chan_out.write<span class="o">(</span>chan_in.read<span class="o">())</span><span class="p">;</span>      // will assert <span class="k">if </span><span class="nb">read </span>of empty channel is attempted
<span class="o">(</span>gdb<span class="o">)</span> 

</code></pre></div></div>

<p>Ta thấy rằng dòng code <code class="language-plaintext highlighter-rouge">chan_in.read()</code> gây ra lỗi “read empty channel”</p>

<p>Giải pháp: Thực hiện kiểm tra channel có dữ liệu hay không trước khi thực hiện đọc như phần dưới đây</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="c1">// test_chan_assert</span>

<span class="c1">//....</span>
 <span class="k">if</span> <span class="p">(</span><span class="n">chan_in</span><span class="p">.</span><span class="n">available</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="p">{</span>          <span class="c1">// Only read if channel not empty</span>
    <span class="n">chan_out</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">chan_in</span><span class="p">.</span><span class="n">read</span><span class="p">());</span>
 <span class="p">}</span></code></pre></figure>

<h2 id="section-3">Section 3</h2>
<h4 id="understand-behaviour-of-shifting-in-ac-data-types">Understand behaviour of shifting in AC data types</h4>

<p>Khi thực hiện dịch trái một vector ac_* phải cast vector đó với một kích thước đủ lớn để đảm bảo giá trị của kết quả thu được phản ánh đúng toán tử dịch trái.</p>

:ET