I"¶"<h2 id="main">Main</h2>

<p>Kh√°c v·ªõi c√°ch ti·∫øp c·∫≠n ·ªü m·ªôt s·ªë tool HLS kh√°c, Catapult coi h√†m <code class="language-plaintext highlighter-rouge">main</code> l√† m·ªôt unbounded loop (infinite loop). Do ƒë√≥ ta ho√†n to√†n c√≥ th·ªÉ c·∫•u h√¨nh ƒë·ªÉ tool t·ªïng h·ª£p <code class="language-plaintext highlighter-rouge">main</code> ra ki·∫øn tr√∫c pipeline. Tuy nhi√™n, Catapult s·∫Ω kh√¥ng t·ª± ƒë·ªông UNROLL c√°c LOOP trong h√†m <code class="language-plaintext highlighter-rouge">main</code> nh∆∞ Vitis HLS, vi·ªác n√†y ƒë∆∞·ª£c th·ª±c hi·ªán ho√†n to√†n d·ª±a v√†o ng∆∞·ªùi thi·∫øt k·∫ø.</p>

<h2 id="loop">LOOP</h2>

<p>Ch·ªâ c√≥ 2 k·ªπ thu·∫≠t ƒë∆∞·ª£c th·ª±c hi·ªán tr√™n LOOP bao g·ªìm</p>

<ul>
  <li>LOOP UNROLLING
    <ul>
      <li>Fully unroll</li>
      <li>Partial unroll</li>
    </ul>
  </li>
  <li>LOOP PIPELINING</li>
</ul>

<p>Pragmas UNROLL</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#pragma unroll yes</span>

</code></pre></div></div>

<h2 id="dynamic-index">Dynamic index</h2>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">void</span> <span class="nf">test_orig</span><span class="p">(</span><span class="kt">int</span> <span class="n">din</span><span class="p">[</span><span class="mi">40</span><span class="p">],</span> <span class="n">uint6</span> <span class="n">offset</span><span class="p">,</span> <span class="kt">int</span> <span class="n">dout</span><span class="p">[</span><span class="mi">40</span><span class="p">])</span>
<span class="p">{</span>
  <span class="k">static</span> <span class="kt">int</span> <span class="n">regs</span><span class="p">[</span><span class="mi">40</span><span class="p">];</span>

  <span class="c1">// Loop is fully unrolled</span>
<span class="cp">#pragma unroll yes
</span>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">40</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">offset</span> <span class="o">&lt;</span> <span class="mi">40</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">regs</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">offset</span><span class="p">]</span> <span class="o">=</span> <span class="n">din</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// Loop is fully unrolled</span>
<span class="cp">#pragma unroll yes
</span>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">40</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">dout</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">regs</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>D√≤ng code <code class="language-plaintext highlighter-rouge">regs[i+offset] = din[i]</code> s·∫Ω ƒë∆∞·ª£c tool b√°o <code class="language-plaintext highlighter-rouge">Warning</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c"># Warning: test_orig.cpp(11): Writing to register bank 'test_orig:regs' with 17 registers using a dynamic index can cause excessive runtime and undesired hardware.  Please inspect coding style. (MEM-74)</span>
</code></pre></div></div>
<p>L√Ω do: <code class="language-plaintext highlighter-rouge">offset</code> l√† bi·∫øn tham s·ªë ƒë∆∞·ª£c ƒë∆∞a v√†o t·ª´ input. <code class="language-plaintext highlighter-rouge">i</code> tuy l√† bi·∫øn counter nh∆∞ng khi th·ª±c hi·ªán unroll, n√≥ s·∫Ω tr·ªü th√†nh <code class="language-plaintext highlighter-rouge">constant</code></p>

<p>Catapult ƒë∆∞·ª£c thi·∫øt k·∫ø s·∫Ω chia t√°ch m·∫£ng m√† ƒë∆∞·ª£c truy c·∫≠p b·∫±ng dynamic index th√†nh nhi·ªÅu bi·∫øn nh·ªè. Do ƒë√≥, v·ªõi d√≤ng code tr√™n m·∫£ng <code class="language-plaintext highlighter-rouge">regs</code> (mapped ·ªü d·∫°ng registers) s·∫Ω ƒë∆∞·ª£c chia nh·ªè th√†nh nhi·ªÅu bi·∫øn t∆∞∆°ng ·ª©ng v·ªõi c√°c gi√° tr·ªã c·ªßa <code class="language-plaintext highlighter-rouge">offset</code>. B√™n c·∫°nh ƒë√≥, d√≤ng code kia lai ·ªü b√™n trong m·ªôt unrolled loop =&gt; M·∫£ng <code class="language-plaintext highlighter-rouge">regs</code> s·∫Ω ƒë∆∞·ª£c chia t√°ch r·∫•t nhi·ªÅu l·∫ßn t∆∞∆°ng ·ª©ng v·ªõi s·ªë v√≤ng l·∫∑p c·ªßa LOOP. ƒêi·ªÅu n√†y d·∫´n t·ªõi th·ªùi gian runtime s·∫Ω b·ªã k√©o d√†i, area s·∫Ω l·ªõn.</p>

<p><strong>Ph∆∞∆°ng √°n gi·∫£i quy·∫øt</strong></p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">void</span> <span class="nf">test</span><span class="p">(</span><span class="kt">int</span> <span class="n">din</span><span class="p">[</span><span class="mi">40</span><span class="p">],</span> <span class="n">uint6</span> <span class="n">offset</span><span class="p">,</span> <span class="kt">int</span> <span class="n">dout</span><span class="p">[</span><span class="mi">40</span><span class="p">])</span>
<span class="p">{</span>
  <span class="k">static</span> <span class="kt">int</span> <span class="n">regs</span><span class="p">[</span><span class="mi">40</span><span class="p">];</span>

<span class="cp">#pragma unroll yes
</span>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">40</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
<span class="cp">#pragma unroll yes
</span>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="mi">40</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">((</span><span class="n">j</span><span class="o">==</span><span class="n">offset</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">j</span><span class="o">+</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">40</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">regs</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">din</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// Loop is fully unrolled</span>
<span class="cp">#pragma unroll yes
</span>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">40</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">dout</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">regs</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">i</code> v√† <code class="language-plaintext highlighter-rouge">j</code> ƒë·ªÅu l√† constant khi c·∫£ hai loop th·ª±c hi·ªán fully unroll. Do ƒë√≥, indexing c·ªßa <code class="language-plaintext highlighter-rouge">regs</code> l√∫c n√†y l√† <code class="language-plaintext highlighter-rouge">constant</code>. Gi√° tr·ªã c·ªßa <code class="language-plaintext highlighter-rouge">j</code> s·∫Ω ƒë∆∞·ª£c guard b·ªüi c√¢u l·ªánh ƒëi·ªÅu khi·ªán.</p>
:ET