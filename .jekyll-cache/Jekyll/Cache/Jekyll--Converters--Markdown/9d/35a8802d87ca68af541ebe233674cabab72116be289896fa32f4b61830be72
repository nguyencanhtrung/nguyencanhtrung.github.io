I"@!<h2 id="1-overview">1. Overview</h2>

<p>There are 3 types of FIFO</p>

<ul>
  <li>SCFIFO: single-clock FIFO</li>
  <li>DCFIFO: dual-clock FIFO (supports same port widths for input and output data)</li>
  <li>DCFIFO_MIXED_WIDTHS: dual-clock FIFO (supports different port widths for input and output data)</li>
</ul>

<p>When comparing with Xilinx,</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Intel</th>
      <th style="text-align: center">Xilinx</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">SCFIFO</td>
      <td style="text-align: center">Synchronous FIFO</td>
    </tr>
    <tr>
      <td style="text-align: center">DCFIFO</td>
      <td style="text-align: center">Asynchronous FIFO</td>
    </tr>
  </tbody>
</table>

<h2 id="2-instantiate-and-configure-fifo">2. Instantiate and configure FIFO</h2>

<p>Xilinx has 2 approaches for declaring and configuring FIFO IP core. Intel also provides the same.</p>

<h3 id="a-megafuntions">a. Megafuntions</h3>

<p>Instantiate the library:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LIBRARY altera_mf<span class="p">;</span>
USE altera_mf.altera_mf_components.all<span class="p">;</span>
</code></pre></div></div>

<p>The VHDL component declaration is located in</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt; Intel® Quartus® Prime installation directory&gt;eda/fv_lib/vhdl/megafunctions/altera_mf_components.vhd
</code></pre></div></div>

<p>Here is <code class="language-plaintext highlighter-rouge">dcfifo</code> declaration</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>component dcfifo
  generic <span class="o">(</span>
    add_ram_output_register : string :<span class="o">=</span> <span class="s2">"OFF"</span><span class="p">;</span>
    add_usedw_msb_bit : string :<span class="o">=</span> <span class="s2">"OFF"</span><span class="p">;</span>
    clocks_are_synchronized : string :<span class="o">=</span> <span class="s2">"FALSE"</span><span class="p">;</span>
    delay_rdusedw : integer :<span class="o">=</span> 1<span class="p">;</span>
    delay_wrusedw : integer :<span class="o">=</span> 1<span class="p">;</span>
    intended_device_family  : string :<span class="o">=</span> <span class="s2">"unused"</span><span class="p">;</span>
    enable_ecc  : string :<span class="o">=</span> <span class="s2">"FALSE"</span><span class="p">;</span>
    lpm_numwords  : integer<span class="p">;</span>
    lpm_showahead : string :<span class="o">=</span> <span class="s2">"OFF"</span><span class="p">;</span>
    lpm_width : integer<span class="p">;</span>
    lpm_widthu  : integer :<span class="o">=</span> 1<span class="p">;</span>
    overflow_checking : string :<span class="o">=</span> <span class="s2">"ON"</span><span class="p">;</span>
    rdsync_delaypipe  : integer :<span class="o">=</span> 0<span class="p">;</span>
    read_aclr_synch : string :<span class="o">=</span> <span class="s2">"OFF"</span><span class="p">;</span>
    underflow_checking  : string :<span class="o">=</span> <span class="s2">"ON"</span><span class="p">;</span>
    use_eab : string :<span class="o">=</span> <span class="s2">"ON"</span><span class="p">;</span>
    write_aclr_synch  : string :<span class="o">=</span> <span class="s2">"OFF"</span><span class="p">;</span>
    wrsync_delaypipe  : integer :<span class="o">=</span> 0<span class="p">;</span>
    lpm_hint  : string :<span class="o">=</span> <span class="s2">"UNUSED"</span><span class="p">;</span>
    lpm_type  : string :<span class="o">=</span> <span class="s2">"dcfifo"</span>
  <span class="o">)</span><span class="p">;</span>
  port<span class="o">(</span>
    aclr  : <span class="k">in </span>std_logic :<span class="o">=</span> <span class="s1">'0'</span><span class="p">;</span>
    data  : <span class="k">in </span>std_logic_vector<span class="o">(</span>lpm_width-1 downto 0<span class="o">)</span> :<span class="o">=</span> <span class="o">(</span>others <span class="o">=&gt;</span> <span class="s1">'0'</span><span class="o">)</span><span class="p">;</span>
    eccstatus : out std_logic_vector<span class="o">(</span>2-1 downto 0<span class="o">)</span><span class="p">;</span>
    q : out std_logic_vector<span class="o">(</span>lpm_width-1 downto 0<span class="o">)</span><span class="p">;</span>
    rdclk : <span class="k">in </span>std_logic :<span class="o">=</span> <span class="s1">'0'</span><span class="p">;</span>
    rdempty : out std_logic<span class="p">;</span>
    rdfull  : out std_logic<span class="p">;</span>
    rdreq : <span class="k">in </span>std_logic :<span class="o">=</span> <span class="s1">'0'</span><span class="p">;</span>
    rdusedw : out std_logic_vector<span class="o">(</span>lpm_widthu-1 downto 0<span class="o">)</span><span class="p">;</span>
    wrclk : <span class="k">in </span>std_logic :<span class="o">=</span> <span class="s1">'0'</span><span class="p">;</span>
    wrempty : out std_logic<span class="p">;</span>
    wrfull  : out std_logic<span class="p">;</span>
    wrreq : <span class="k">in </span>std_logic :<span class="o">=</span> <span class="s1">'0'</span><span class="p">;</span>
    wrusedw : out std_logic_vector<span class="o">(</span>lpm_widthu-1 downto 0<span class="o">)</span>
  <span class="o">)</span><span class="p">;</span>
end component<span class="p">;</span>
</code></pre></div></div>

<p>Note: if using Stratix 10, <code class="language-plaintext highlighter-rouge">use_eab = ON</code> is a must.</p>

<p>Looking at signals description <strong><a href="https://www.intel.com/content/www/us/en/docs/programmable/683522/18-0/fifo-signals.html">here</a></strong> and parameters description <strong><a href="https://www.intel.com/content/www/us/en/docs/programmable/683522/18-0/fifo-parameter-settings.html">here</a></strong></p>

<h3 id="b-fifo-parameter-editor">b. FIFO parameter editor</h3>

<p>Openning IP Catalog,</p>

<p><code class="language-plaintext highlighter-rouge">Basic Functions &gt; On Chip memory &gt; FIFO intel</code></p>

<p>There, you can configure your FIFOs. Then, generating IP &gt; Open the HDL file to copy the top module as the component in your design.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/01.blogs/221123_fifo_intel/1-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/01.blogs/221123_fifo_intel/1-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/01.blogs/221123_fifo_intel/1-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/01.blogs/221123_fifo_intel/1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<h3 id="c-what-are-differences">c. What are differences?</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Megafunctions</th>
      <th style="text-align: left">IP Catalog</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Users must specify timing constraints by themselve. To constraint megafunction FIFO is shown <a href="https://community.intel.com/t5/FPGA-Wiki/DCFIFO-Timing-Constraints/ta-p/735793">here</a> and <a href="https://www.intel.com/content/www/us/en/docs/programmable/683082/22-3/dual-clock-fifo-timing-constraints.html">here</a></td>
      <td style="text-align: left">Timing constraints is automatically generated by the tool. If you are not sure how to constraint the design, this way is recommended.</td>
    </tr>
  </tbody>
</table>

<h2 id="3-important-configurations">3. Important configurations</h2>

<h3 id="clear">Clear</h3>

<h3 id="normal-vs-show-ahead-mode">Normal vs Show-Ahead mode</h3>

<h2 id="4-example-design">4. Example design</h2>

<p>http://blogs.plymouth.ac.uk/embedded-systems/fpga-and-vhdl/testing-understanding-the-scfifo-megafunction/</p>

<h2 id="references">References</h2>

<ul>
  <li>[1] https://www.intel.com/content/www/us/en/docs/programmable/683522/18-0/vhdl-library-use-declaration.html</li>
  <li>[2] https://www.intel.com/content/www/us/en/docs/programmable/683522/18-0/vhdl-component-declaration.html</li>
</ul>
:ET